;; .myemacs for emacs.dot in /u/all/le-gue_t/cu
;; Made by tristan le-guern-
;; Login   <le-gue_t@epitech.net>
;;
;; Started on  Mon Jun 15 16:44:44 2009 tristan le-guern-
;; Last update Mon Mar 29 14:54:08 2010 tristan le-guern-
;;

;;;;;;;;;;;;;;
;; Includes ;;
;;;;;;;;;;;;;;

(setq auto-mode-alist
      (append
       '(("\\.php$" . php-mode)
         ("\\.php5$" . php-mode)
	 ("\\.c$" . c-mode)
	 ("\\.css$" . css-mode)
	 ("\\.tpl$" . html-mode)
	 ("\\.html$" . html-mode)
	 )
       auto-mode-alist))

;;;;;;;;;;;
;; Modes ;;
;;;;;;;;;;;

(add-to-list 'load-path (expand-file-name "~/.emacs.d"))
(load "php-mode.elc")
(load "css-mode.elc")
(load "std_comment.elc")
(load "blank-mode.elc")
(load "ascii-table.elc")
(load "multi-shell.elc")
(load "multi-scratch.elc")
(load "workspace.elc")

;;;;;;;;;;;;;;;;;;;;;;;;
;; Defautls variables ;;
;;;;;;;;;;;;;;;;;;;;;;;;

(custom-set-variables
 '(scroll-step 1)
 '(show-paren-mode t)
 '(transient-mark-mode t)
 '(global-hl-line-mode t)
 '(global-font-lock-mode t)
 '(iswitchb-mode t)
 '(indent-tabs-mode t)
 '(after-save-hook (quote (executable-make-buffer-file-executable-if-script-p)))
 '(ido-auto-merge-work-directories-length -1)
 '(ido-confirm-unique-completion t)
 '(ido-create-new-buffer (quote always))
 '(ido-everywhere t)
 '(ido-ignore-buffers (quote ("\\`\\*breakpoints of.*\\*\\'" "\\`\\*stack frames of.*\\*\\\
'" "\\`\\*gud\\*\\'" "\\`\\*locals of.*\\*\\'" "\\` ")))
 '(ido-mode (quote both) nil (ido))
 '(require-final-newline t)
)

(setq	user-full-name "le-gue_t"
        user-mail-address "le-gue_t@epitech.net"
        user-login-name "le-gue_t"
	default-input-method "french-prefix"
	browse-url-browser-function 'browse-url-generic
	browse-url-generic-program "~/opera"
	make-backup-files nil                     ;; no fucking backup files
	delete-key-deletes-forward t              ;; backspace and delete don't bitch
	inhibit-startup-message t                 ;; no startup message in xemacs
	frame-title-format "%b"                   ;; window title = buffer title
	display-time-day-and-date t               ;; hour and date
	display-time-24hr-format t                ;; Hour in french format
	normal-erase-is-backspace-mode 1
	ring-bell-function 'ignore                ;; turn the alarm totally off
	column-number-mode t
	line-number-mode t
	initial-scratch-message ""
	gdb-many-windows t
	)

(fset 'yes-or-no-p 'y-or-n-p)                   ;; `y' for `yes' and `n' for `no'

;;;;;;;;;;;;;;;;;
;; Key Binding ;;
;;;;;;;;;;;;;;;;;

(global-set-key [up] 'previous-line)
(global-set-key [down] 'next-line)
(global-set-key [left] 'backward-char)
(global-set-key [right] 'forward-char)
(global-set-key [home] 'beginning-of-line)
(global-set-key [select] 'end-of-line)

(global-set-key (kbd "C-c C-g") 'goto-line)
(global-set-key [(control b)] 'ido-switch-buffer)               ;; swich between buffer
(global-set-key [f7] 'kill-this-buffer)                         ;; kill current buffer
(global-set-key (kbd "C-c C-c") 'comment-region)                ;; comment selected region
(global-set-key [(control r)] 'query-replace)			;; replace regexp
(global-set-key [(control tab)] 'previous-multiframe-window)
(global-set-key (kbd "C-h") 'help)				;; help command
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)

;;;;;;;;;;;;;;;;;;;;;;
;; Faces and Colors ;;
;;;;;;;;;;;;;;;;;;;;;;

(custom-set-faces
 '(default ((t (:foreground "white" :background "black" :weight light))))
 '(cursor ((t (:background "#FF0000"))))
 '(mouse ((t (:foreground "white" :background "black"))))
 '(highlight ((t (:background "grey2" :height 1.0 :weight bold))))
 '(font-lock-builtin-face ((t (:foreground "violet"))))
 '(font-lock-comment-delimiter-face ((t (:foreground "red"))))
 '(font-lock-comment-face ((t (:foreground "grey" :slant italic))))
 '(font-lock-constant-face ((t (:foreground "red"))))
 '(font-lock-function-name-face ((default (:foreground "violet" :slant italic))))
 '(font-lock-keyword-face ((t (:foreground "gray" :underline t))))
 '(font-lock-negation-char-face ((t (:foreground "pink"))))
 '(font-lock-preprocessor-face ((t (:foreground "white" :slant italic))))
 '(font-lock-string-face ((t (:foreground "red" :weight bold))))
 '(font-lock-type-face ((t (:foreground "red"))))
 '(font-lock-variable-name-face ((default (:foreground "grey" :weight bold))))
 '(font-lock-warning-face ((t (:foreground "white" :underline "red"))))
 '(ido-subdir ((t (:foreground "red"))))
 '(ido-first-match ((t (:foreground "red"))))
 '(show-paren-match ((t (:background "blue" :foreground "white"))))
 '(show-paren-mismatch ((t (:background "red" :foreground "white"))))
 '(minibuffer-prompt ((t (:foreground "green"))))
)

;;;;;;;;;;;;;;;
;; Functions ;;
;;;;;;;;;;;;;;;

(defun insert-shell-shebang ()
 (interactive)
 (save-excursion
   (goto-char (point-min))
   (insert "#!/bin/sh\n\n")))

(defun insert-php ()
 (interactive)
 (save-excursion
   (goto-char (point-min))
   (insert "<?php\n\n?>"))
 )

;;;;;;;;;;;
;; Hooks ;;
;;;;;;;;;;;

(add-hook 'hs-minor-mode-hook
          '(lambda ()
             (global-set-key (kbd "C-c <left>") 'hs-toggle-hiding)
             (global-set-key (kbd "C-c <cright>") 'hs-toggle-hiding)))

(add-hook 'write-file-hooks 'delete-trailing-whitespace)

(add-hook 'sh-mode-hook
         (lambda ()
           (when (equal (point-min) (point-max))
             (insert-shell-shebang)
             (goto-char (point-max)))))

(add-hook 'php-mode-hook
         (lambda ()
           (when (equal (point-min) (point-max))
             (insert-php)
             (goto-char (point-max)))))
(add-hook 'php-mode-hook 'hs-minor-mode)

(add-hook 'c-mode-hook
          '(lambda ()
             (hs-minor-mode)))

(add-hook 'text-mode-hook
	  (lambda () (set-input-method "french-prefix")))

